# 定义服务，即需要运行的容器集合
services:
  # 定义一个名为'nest-app'的服务
  nest-app:
    # 构建配置，指定Dockerfile的路径和上下文
    build:
      # 指定Docker构建上下文的路径，通常是Dockerfile所在的目录
      context: ./nest-app/
      # 指定Dockerfile的路径，相对于构建上下文
      dockerfile: ./Dockerfile
    # 定义该服务所依赖的其他服务，它们将按照依赖顺序启动
    depends_on:
      # 依赖名为'mysql-container'的服务
      - mysql-container
      # 依赖名为'redis-container'的服务
      - redis-container
    # 端口映射，将宿主机的3000端口映射到容器的3000端口
    ports:
      - '3000:3000'
    env_file:
      - .env # 确保这里引用了正确路径的.env 文件
    environment:
      DATABASE_HOST: ${MYSQL_HOST}
      DATABASE_PORT: ${MYSQL_PORT}
      DATABASE_NAME: ${MYSQL_DATABASE}
      DATABASE_USER: ${MYSQL_USER}
      DATABASE_PASSWORD: ${MYSQL_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./nest-app/dist:/usr/src/app/dist

  # 定义一个名为'mysql-container'的服务，使用mysql镜像
  mysql-container:
    # 指定使用mysql官方Docker镜像
    image: mysql
    # 端口映射，将宿主机的3306端口映射到容器的3306端口
    ports:
      - '3306:3306'
    restart: always
    # 数据卷配置，用于持久化存储
    volumes:
      # 将宿主机的/Users/yunmu/Desktop/mysql目录映射到容器的/var/lib/mysql目录
      - /Users/bytedance/Desktop/test/node-fullstack-volumes/mysql:/var/lib/mysql

  # 定义一个名为'redis-container'的服务，使用redis镜像
  redis-container:
    # 指定使用redis官方Docker镜像
    image: redis
    # 端口映射，将宿主机的6379端口映射到容器的6379端口
    ports:
      - '6379:6379'
    restart: always
    # 数据卷配置，用于持久化存储
    volumes:
      # 将宿主机的/Users/yunmu/Desktop/redis目录映射到容器的/data目录
      - /Users/bytedance/Desktop/test/node-fullstack-volumes/redis:/data

networks:
  app-network:
    driver: bridge